"""
Module utilitaire pour le chargement et l'utilisation du modÃ¨le de prÃ©diction
"""

import joblib
import pandas as pd
import numpy as np
from config import MODEL_PATH, SCALER_PATH, FEATURES_PATH
from preprocessing import preprocess_for_prediction


def load_model():
    """
    Charge le modÃ¨le de prÃ©diction entraÃ®nÃ©

    Returns:
        model: ModÃ¨le chargÃ© ou None en cas d'erreur
    """
    try:
        model = joblib.load(MODEL_PATH)
        print(f"ModÃ¨le chargÃ©: {MODEL_PATH}")
        return model
    except Exception as e:
        print(f"Erreur lors du chargement du modÃ¨le: {e}")
        return None


def load_scaler():
    """
    Charge le StandardScaler entraÃ®nÃ©

    Returns:
        scaler: Scaler chargÃ© ou None en cas d'erreur
    """
    try:
        scaler = joblib.load(SCALER_PATH)
        print(f"Scaler chargÃ©: {SCALER_PATH}")
        return scaler
    except Exception as e:
        print(f"Erreur lors du chargement du scaler: {e}")
        return None


def load_feature_names():
    """
    Charge les noms des features attendues par le modÃ¨le

    Returns:
        list: Liste des noms de features ou None en cas d'erreur
    """
    try:
        features = joblib.load(FEATURES_PATH)
        print(f"Features chargÃ©es: {len(features)} features")
        return features
    except Exception as e:
        print(f"Erreur lors du chargement des features: {e}")
        return None


def load_all_artifacts():
    """
    Charge tous les artifacts nÃ©cessaires (modÃ¨le, scaler, features)

    Returns:
        tuple: (model, scaler, features) ou (None, None, None) en cas d'erreur
    """
    print("Chargement des artifacts du modÃ¨le...")
    print("="*60)

    model = load_model()
    scaler = load_scaler()
    features = load_feature_names()

    if model is None or scaler is None or features is None:
        print("Ã‰chec du chargement des artifacts")
        return None, None, None

    print("="*60)
    print(f"Tous les artifacts chargÃ©s avec succÃ¨s")
    print(f"â”œâ”€ ModÃ¨le: {type(model).__name__}")
    print(f"â”œâ”€ Scaler: {type(scaler).__name__}")
    print(f"â””â”€ Features: {len(features)} features attendues")

    return model, scaler, features


def predict_churn(df, model, scaler):
    """
    Effectue la prÃ©diction de churn sur un DataFrame

    Args:
        df: DataFrame avec les donnÃ©es brutes
        model: ModÃ¨le entraÃ®nÃ©
        scaler: StandardScaler entraÃ®nÃ©

    Returns:
        tuple: (predictions, probabilities, df_processed)
            - predictions: Array avec les prÃ©dictions (0 ou 1)
            - probabilities: Array avec les probabilitÃ©s de churn
            - df_processed: DataFrame avec les features prÃ©traitÃ©es
    """
    try:
        print("ğŸ”® DÃ©but de la prÃ©diction...")
        print("="*60)

        # PrÃ©traitement des donnÃ©es
        X = preprocess_for_prediction(df, scaler)

        # VÃ©rification
        if X.shape[0] == 0:
            print("Aucune donnÃ©e aprÃ¨s preprocessing")
            return None, None, None

        # PrÃ©dictions
        print("ğŸ”® Calcul des prÃ©dictions...")
        predictions = model.predict(X)
        probabilities = model.predict_proba(X)[:, 1]

        print("="*60)
        print(f"PrÃ©dictions effectuÃ©es pour {len(predictions)} clients")
        print(f"â”œâ”€ Churn prÃ©dit: {predictions.sum()} clients ({predictions.mean()*100:.1f}%)")
        print(f"â””â”€ ProbabilitÃ© moyenne: {probabilities.mean():.3f}")

        return predictions, probabilities, X

    except Exception as e:
        print(f"Erreur lors de la prÃ©diction: {e}")
        import traceback
        traceback.print_exc()
        return None, None, None


def add_predictions_to_dataframe(df_original, predictions, probabilities):
    """
    Ajoute les prÃ©dictions et probabilitÃ©s au DataFrame original

    Args:
        df_original: DataFrame original
        predictions: Array des prÃ©dictions
        probabilities: Array des probabilitÃ©s

    Returns:
        DataFrame: DataFrame enrichi avec les prÃ©dictions
    """
    df = df_original.copy()

    # Ajouter les prÃ©dictions
    df['Prediction'] = predictions
    df['Probability_Churn'] = probabilities

    # Ajouter le niveau de risque
    df['Risk_Level'] = pd.cut(
        probabilities,
        bins=[0, 0.3, 0.7, 1.0],
        labels=['Faible', 'Moyen', 'Ã‰levÃ©']
    )

    print(f"PrÃ©dictions ajoutÃ©es au DataFrame")

    return df


def get_prediction_summary(predictions, probabilities):
    """
    GÃ©nÃ¨re un rÃ©sumÃ© des prÃ©dictions

    Args:
        predictions: Array des prÃ©dictions
        probabilities: Array des probabilitÃ©s

    Returns:
        dict: Dictionnaire avec les statistiques de prÃ©diction
    """
    summary = {
        'total_clients': len(predictions),
        'churn_predicted': int(predictions.sum()),
        'churn_percentage': round(predictions.mean() * 100, 2),
        'avg_probability': round(probabilities.mean(), 3),
        'high_risk_count': int((probabilities > 0.7).sum()),
        'medium_risk_count': int(((probabilities > 0.3) & (probabilities <= 0.7)).sum()),
        'low_risk_count': int((probabilities <= 0.3).sum())
    }

    return summary


def get_high_risk_clients(df_with_predictions, top_n=10):
    """
    Extrait les clients Ã  haut risque

    Args:
        df_with_predictions: DataFrame avec les prÃ©dictions
        top_n: Nombre de clients Ã  retourner (par dÃ©faut 10)

    Returns:
        DataFrame: Top N clients Ã  risque
    """
    # Filtrer les clients avec prÃ©diction de churn
    high_risk = df_with_predictions[df_with_predictions['Prediction'] == 1].copy()

    # Trier par probabilitÃ© dÃ©croissante
    high_risk = high_risk.sort_values('Probability_Churn', ascending=False)

    # Retourner le top N
    return high_risk.head(top_n)


def calculate_accuracy(predictions, actual_labels):
    """
    Calcule l'accuracy si les vraies Ã©tiquettes sont disponibles

    Args:
        predictions: PrÃ©dictions du modÃ¨le
        actual_labels: Vraies Ã©tiquettes

    Returns:
        float: Accuracy en pourcentage
    """
    if actual_labels is None or len(actual_labels) == 0:
        return None

    accuracy = (predictions == actual_labels).sum() / len(predictions) * 100
    return round(accuracy, 2)


def save_predictions_to_csv(df_with_predictions, filename='predictions.csv'):
    """
    Sauvegarde les prÃ©dictions dans un fichier CSV

    Args:
        df_with_predictions: DataFrame avec les prÃ©dictions
        filename: Nom du fichier de sortie

    Returns:
        bool: True si succÃ¨s, False sinon
    """
    try:
        df_with_predictions.to_csv(filename, index=False)
        print(f"PrÃ©dictions sauvegardÃ©es dans {filename}")
        return True
    except Exception as e:
        print(f"Erreur lors de la sauvegarde: {e}")
        return False
