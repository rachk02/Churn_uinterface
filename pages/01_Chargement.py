import streamlit as st
import pandas as pd
from logger import logger
from validation import validate_raw_data

st.set_page_config(page_title="Chargement", layout="wide")

st.title("Chargement des Donn√©es")
st.markdown("---")

# Instructions
st.info("""
**Instructions:**
1. Choisis ton fichier CSV ou XLSX contenant les donn√©es clients
2. Le fichier sera valid√© automatiquement
3. Vous verrez un aper√ßu des donn√©es
4. Clique sur "Sauvegarder" pour continuer vers l'EDA
""")

# Upload fichier (CSV ou XLSX)
uploaded_file = st.file_uploader(
    "Choisissez un fichier CSV ou Excel",
    type=['csv', 'xlsx', 'xls'],
    help="Fichier CSV ou Excel avec les donn√©es clients"
)

if uploaded_file is not None:
    try:
        # Charger les donn√©es selon le type de fichier
        with st.spinner("Chargement du fichier..."):
            file_extension = uploaded_file.name.split('.')[-1].lower()
            
            if file_extension == 'csv':
                df = pd.read_csv(uploaded_file)
                logger.info(f"Fichier CSV charg√©: {uploaded_file.name}")
            elif file_extension in ['xlsx', 'xls']:
                df = pd.read_excel(uploaded_file)
                logger.info(f"Fichier Excel charg√©: {uploaded_file.name}")
            else:
                st.error("Format de fichier non support√©")
                st.stop()
            
            logger.info(f"Donn√©es charg√©es: {df.shape[0]} lignes √ó {df.shape[1]} colonnes")
        
        st.success(f"Fichier charg√© avec succ√®s: **{df.shape[0]:,}** lignes √ó **{df.shape[1]}** colonnes")
        
        # Validation
        st.markdown("### Validation des donn√©es")
        
        with st.spinner("Validation en cours..."):
            validation_result = validate_raw_data(df)
        
        col1, col2 = st.columns(2)
        
        with col1:
            if validation_result['valid']:
                st.success("**Validation r√©ussie**")
            else:
                st.error("**Validation √©chou√©e**")
        
        with col2:
            if validation_result['warnings']:
                st.warning(f"‚ö†**{len(validation_result['warnings'])} avertissements**")
        
        # Afficher les erreurs
        if validation_result['errors']:
            with st.expander("Erreurs d√©tect√©es", expanded=True):
                for error in validation_result['errors']:
                    st.error(f"‚Ä¢ {error}")
        
        # Afficher les warnings
        if validation_result['warnings']:
            with st.expander("Avertissements"):
                for warning in validation_result['warnings']:
                    st.warning(f"‚Ä¢ {warning}")
        
        # Statistiques du fichier
        st.markdown("### Statistiques du fichier")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("Lignes", f"{df.shape[0]:,}")
        with col2:
            st.metric("Colonnes", df.shape[1])
        with col3:
            null_count = df.isnull().sum().sum()
            st.metric("Valeurs manquantes", f"{null_count:,}")
        with col4:
            size_mb = df.memory_usage(deep=True).sum() / 1024**2
            st.metric("Taille", f"{size_mb:.2f} MB")
        
        # Types de colonnes
        st.markdown("### Types de colonnes")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**Colonnes num√©riques:**")
            numeric_cols = df.select_dtypes(include=['int64', 'float64']).columns.tolist()
            st.write(f"{len(numeric_cols)} colonnes")
            if len(numeric_cols) > 0:
                with st.expander("Voir la liste"):
                    for col in numeric_cols:
                        st.write(f"‚Ä¢ {col}")
        
        with col2:
            st.write("**Colonnes textuelles:**")
            text_cols = df.select_dtypes(include=['object']).columns.tolist()
            st.write(f"{len(text_cols)} colonnes")
            if len(text_cols) > 0:
                with st.expander("Voir la liste"):
                    for col in text_cols:
                        st.write(f"‚Ä¢ {col}")
        
        # Aper√ßu des donn√©es
        st.markdown("### Aper√ßu des donn√©es")
        
        # S√©lecteur de nombre de lignes
        n_rows = st.slider("Nombre de lignes √† afficher", 5, 100, 20)
        
        # Afficher le DataFrame
        st.dataframe(df.head(n_rows), use_container_width=True, height=400)
        
        # Statistiques descriptives
        with st.expander("Statistiques descriptives"):
            st.dataframe(df.describe(), use_container_width=True)
        
        # Informations sur les valeurs manquantes
        with st.expander("D√©tails des valeurs manquantes"):
            missing = df.isnull().sum()
            missing = missing[missing > 0].sort_values(ascending=False)
            
            if len(missing) > 0:
                missing_df = pd.DataFrame({
                    'Colonne': missing.index,
                    'Valeurs manquantes': missing.values,
                    'Pourcentage': (missing.values / len(df) * 100).round(2)
                })
                st.dataframe(missing_df, use_container_width=True)
            else:
                st.success("Aucune valeur manquante dans le dataset")
        
        # Bouton pour sauvegarder
        st.markdown("---")
        
        col1, col2, col3 = st.columns([1, 2, 1])
        
        with col2:
            if st.button("Sauvegarder et continuer vers l'EDA",
                        type="primary", 
                        use_container_width=True):
                st.session_state['df_raw'] = df
                logger.info("Donn√©es sauvegard√©es dans session_state")
                st.success("Donn√©es sauvegard√©es avec succ√®s !")
                st.balloons()
                st.info("Vous pouvez maintenant aller dans **EDA** (sidebar)")
    
    except Exception as e:
        st.error(f"**Erreur lors du chargement du fichier**")
        st.error(f"D√©tails: {str(e)}")
        logger.error(f"Erreur chargement fichier: {e}")
        
        with st.expander("üîß Aide au d√©bogage"):
            st.write("""
            **Causes possibles:**
            - Fichier corrompu
            - Format CSV/Excel invalide
            - Encodage incorrect (pour CSV)
            - Feuille Excel vide
            
            **Solutions:**
            - V√©rifie que le fichier n'est pas corrompu
            - Pour CSV: essaie d'ouvrir avec un √©diteur de texte
            - Pour Excel: v√©rifie que les donn√©es sont dans la premi√®re feuille
            - Pour CSV: v√©rifie l'encodage (UTF-8 recommand√©)
            """)
            
            # Afficher le traceback complet
            import traceback
            st.code(traceback.format_exc())

else:
    # Message si aucun fichier upload√©
    st.warning("**Chargez un fichier CSV ou Excel pour commencer**")
    
    st.markdown("### Format attendu")
    st.write("""
    Le fichier CSV ou Excel doit contenir au minimum ces colonnes:
    - `CustomerID` : Identifiant unique du client
    - `Age`, `Gender`, `Segment`, `NPS` : Informations client
    - `PaymentHistory`, `ServiceInteractions`, `EngagementMetrics` : Donn√©es JSON
    - `Feedback`, `WebsiteUsage`, `MarketingCommunication` : Donn√©es JSON
    - `PurchaseHistory`, `ClickstreamData` : Donn√©es JSON
    - `ChurnLabel` : Variable cible (0 ou 1) - optionnel pour la pr√©diction
    """)
    
    st.markdown("### Conseils")
    col1, col2 = st.columns(2)
    
    with col1:
        st.info("""
        **Pour les fichiers CSV:**
        - Utilise l'encodage UTF-8
        - S√©parateur: virgule (,)
        - Pas d'espaces dans les noms de colonnes
        """)
    
    with col2:
        st.info("""
        **Pour les fichiers Excel:**
        - Format: .xlsx ou .xls
        - Donn√©es dans la premi√®re feuille
        - Pas de cellules fusionn√©es
        """)

# Afficher l'√©tat actuel
st.markdown("---")
st.markdown("### √âtat actuel")

if st.session_state['df_raw'] is not None:
    df_info = st.session_state['df_raw']
    
    st.success(f"""
    **Donn√©es en m√©moire**
    - Lignes: {df_info.shape[0]:,}
    - Colonnes: {df_info.shape[1]}
    - Taille: {df_info.memory_usage(deep=True).sum() / 1024**2:.2f} MB
    """)
    
    # Bouton pour supprimer les donn√©es
    if st.button("Supprimer les donn√©es en m√©moire", type="secondary"):
        st.session_state['df_raw'] = None
        st.session_state['df_parsed'] = None
        st.session_state['df_encoded'] = None
        st.session_state['df_normalized'] = None
        st.session_state['df_model'] = None
        st.session_state['df_with_predictions'] = None
        st.warning("Donn√©es supprim√©es. Recharge la page.")
        st.rerun()
else:
    st.info("Aucune donn√©e en m√©moire pour le moment")
